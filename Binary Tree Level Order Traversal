// Level Order traversal in Binary tree//
Time Complexity is O(n) & Space Complexity is O(n) where n is the number of nodes


Code:-
 /**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
     vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>>arr;
        if(root==nullptr)return arr;
         // Queue for storing the Node of Binary tree
        queue<TreeNode*>q;
         // pushing the first Node into Queue
        q.push(root);
        while(!q.empty()){
            vector<int>ans;
            // Size of the queue
            int n=q.size();
            for(int i=0;i<n;i++){
                
                TreeNode*Node=q.front();
                q.pop();
                if(Node->left)q.push(Node->left);   // Pushong the left children into Queue
                
                if(Node->right)q.push(Node->right); // Pushing the right children into the queue
                
                ans.push_back(Node->val);
            }
            arr.push_back(ans);
        }
        return arr;
        
    }
};
